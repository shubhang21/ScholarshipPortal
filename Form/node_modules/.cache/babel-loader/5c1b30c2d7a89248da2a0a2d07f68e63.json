{"ast":null,"code":"import { UploadFileStatus } from '../interfaces/UploadFileStatus';\nimport { guid } from '@progress/kendo-react-common';\nvar ampRegExp = /&/g;\nvar ltRegExp = /</g;\nvar quoteRegExp = /\"/g;\nvar aposRegExp = /'/g;\nvar gtRegExp = />/g;\n\nvar htmlEncode = function (value) {\n  return ('' + value).replace(ampRegExp, '&amp;').replace(ltRegExp, '&lt;').replace(gtRegExp, '&gt;').replace(quoteRegExp, '&quot;').replace(aposRegExp, '&#39;');\n};\n\nvar getFileExtension = function (fileName) {\n  var rFileExtension = /\\.([^\\.]+)$/;\n  var matches = fileName.match(rFileExtension);\n  return matches ? matches[0] : '';\n};\n\nvar getFileInfo = function (rawFile) {\n  var fileName = rawFile.name;\n  var fileSize = rawFile.size;\n  return {\n    extension: getFileExtension(fileName),\n    name: htmlEncode(fileName),\n    getRawFile: function () {\n      return rawFile;\n    },\n    size: fileSize,\n    status: UploadFileStatus.Selected,\n    progress: 0,\n    uid: ''\n  };\n};\n\nvar getAllFileInfo = function (rawFiles) {\n  var allFileInfo = new Array();\n  var i;\n\n  for (i = 0; i < rawFiles.length; i++) {\n    allFileInfo.push(getFileInfo(rawFiles[i]));\n  }\n\n  return allFileInfo;\n};\n\nvar fileHasValidationErrors = function (file) {\n  if (file.validationErrors && file.validationErrors.length > 0) {\n    return true;\n  }\n\n  return false;\n};\n\nvar filesHaveValidationErrors = function (files) {\n  for (var _i = 0, files_1 = files; _i < files_1.length; _i++) {\n    var file = files_1[_i];\n\n    if (fileHasValidationErrors(file)) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nvar getTotalFilesSizeMessage = function (files) {\n  var totalSize = 0;\n  var i;\n\n  if (typeof files[0].size === 'number') {\n    for (i = 0; i < files.length; i++) {\n      if (files[i].size) {\n        totalSize += files[i].size || 0;\n      }\n    }\n  } else {\n    return '';\n  }\n\n  totalSize /= 1024;\n\n  if (totalSize < 1024) {\n    return totalSize.toFixed(2) + ' KB';\n  } else {\n    return (totalSize / 1024).toFixed(2) + ' MB';\n  }\n};\n\nvar assignGuidToFiles = function (files, batchFiles) {\n  var uid = guid();\n  return files.map(function (file) {\n    file.uid = batchFiles ? uid : guid();\n    return file;\n  });\n};\n\nvar getFileStatus = function (currentFiles) {\n  var isUploading = false;\n  var isUploaded = false;\n  var isUploadFailed = false;\n  var isUploadValidationFailed = false;\n\n  var checkFilesStatus = function (files) {\n    files.forEach(function (file) {\n      if (file.status === UploadFileStatus.Uploading) {\n        isUploading = true;\n      }\n\n      if (file.status === UploadFileStatus.Uploaded) {\n        isUploaded = true;\n      }\n\n      if (file.status === UploadFileStatus.UploadFailed) {\n        isUploadFailed = true;\n      }\n\n      if (fileHasValidationErrors(file)) {\n        isUploadValidationFailed = true;\n      }\n    });\n  };\n\n  if (Array.isArray(currentFiles)) {\n    checkFilesStatus(currentFiles);\n  } else {\n    Object.keys(currentFiles).forEach(function (key) {\n      checkFilesStatus(currentFiles[key]);\n    });\n  }\n\n  return [isUploading, isUploaded, isUploadFailed, isUploadValidationFailed];\n};\n\nexport default {\n  fileHasValidationErrors: fileHasValidationErrors,\n  filesHaveValidationErrors: filesHaveValidationErrors,\n  getTotalFilesSizeMessage: getTotalFilesSizeMessage,\n  getAllFileInfo: getAllFileInfo,\n  getFileInfo: getFileInfo,\n  getFileExtension: getFileExtension,\n  htmlEncode: htmlEncode,\n  assignGuidToFiles: assignGuidToFiles,\n  getFileStatus: getFileStatus\n};","map":{"version":3,"sources":["../../../src/utils/utils.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { UploadFileStatus } from '../interfaces/UploadFileStatus';\nimport { guid } from '@progress/kendo-react-common';\nvar ampRegExp = /&/g;\nvar ltRegExp = /</g;\nvar quoteRegExp = /\"/g;\nvar aposRegExp = /'/g;\nvar gtRegExp = />/g;\nvar htmlEncode = function (value) {\n    return ('' + value).replace(ampRegExp, '&amp;')\n        .replace(ltRegExp, '&lt;')\n        .replace(gtRegExp, '&gt;')\n        .replace(quoteRegExp, '&quot;')\n        .replace(aposRegExp, '&#39;');\n};\nvar getFileExtension = function (fileName) {\n    var rFileExtension = /\\.([^\\.]+)$/;\n    var matches = fileName.match(rFileExtension);\n    return matches ? matches[0] : '';\n};\nvar getFileInfo = function (rawFile) {\n    var fileName = rawFile.name;\n    var fileSize = rawFile.size;\n    return {\n        extension: getFileExtension(fileName),\n        name: htmlEncode(fileName),\n        getRawFile: function () { return rawFile; },\n        size: fileSize,\n        status: UploadFileStatus.Selected,\n        progress: 0,\n        uid: ''\n    };\n};\nvar getAllFileInfo = function (rawFiles) {\n    var allFileInfo = new Array();\n    var i;\n    for (i = 0; i < rawFiles.length; i++) {\n        allFileInfo.push(getFileInfo(rawFiles[i]));\n    }\n    return allFileInfo;\n};\nvar fileHasValidationErrors = function (file) {\n    if (file.validationErrors && file.validationErrors.length > 0) {\n        return true;\n    }\n    return false;\n};\nvar filesHaveValidationErrors = function (files) {\n    for (var _i = 0, files_1 = files; _i < files_1.length; _i++) {\n        var file = files_1[_i];\n        if (fileHasValidationErrors(file)) {\n            return true;\n        }\n    }\n    return false;\n};\nvar getTotalFilesSizeMessage = function (files) {\n    var totalSize = 0;\n    var i;\n    if (typeof files[0].size === 'number') {\n        for (i = 0; i < files.length; i++) {\n            if (files[i].size) {\n                totalSize += (files[i].size || 0);\n            }\n        }\n    }\n    else {\n        return '';\n    }\n    totalSize /= 1024;\n    if (totalSize < 1024) {\n        return totalSize.toFixed(2) + ' KB';\n    }\n    else {\n        return (totalSize / 1024).toFixed(2) + ' MB';\n    }\n};\nvar assignGuidToFiles = function (files, batchFiles) {\n    var uid = guid();\n    return files.map(function (file) {\n        file.uid = batchFiles ? uid : guid();\n        return file;\n    });\n};\nvar getFileStatus = function (currentFiles) {\n    var isUploading = false;\n    var isUploaded = false;\n    var isUploadFailed = false;\n    var isUploadValidationFailed = false;\n    var checkFilesStatus = function (files) {\n        files.forEach(function (file) {\n            if (file.status === UploadFileStatus.Uploading) {\n                isUploading = true;\n            }\n            if (file.status === UploadFileStatus.Uploaded) {\n                isUploaded = true;\n            }\n            if (file.status === UploadFileStatus.UploadFailed) {\n                isUploadFailed = true;\n            }\n            if (fileHasValidationErrors(file)) {\n                isUploadValidationFailed = true;\n            }\n        });\n    };\n    if (Array.isArray(currentFiles)) {\n        checkFilesStatus(currentFiles);\n    }\n    else {\n        Object.keys(currentFiles).forEach(function (key) {\n            checkFilesStatus(currentFiles[key]);\n        });\n    }\n    return [isUploading, isUploaded, isUploadFailed, isUploadValidationFailed];\n};\nexport default {\n    fileHasValidationErrors: fileHasValidationErrors,\n    filesHaveValidationErrors: filesHaveValidationErrors,\n    getTotalFilesSizeMessage: getTotalFilesSizeMessage,\n    getAllFileInfo: getAllFileInfo,\n    getFileInfo: getFileInfo,\n    getFileExtension: getFileExtension,\n    htmlEncode: htmlEncode,\n    assignGuidToFiles: assignGuidToFiles,\n    getFileStatus: getFileStatus\n};\n//# sourceMappingURL=utils.js.map"]},"metadata":{},"sourceType":"module"}