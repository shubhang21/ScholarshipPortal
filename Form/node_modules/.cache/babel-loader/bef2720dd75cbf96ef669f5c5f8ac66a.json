{"ast":null,"code":"var INVALIDMAXFILESIZE = 'invalidMaxFileSize';\nvar INVALIDMINFILESIZE = 'invalidMinFileSize';\nvar INVALIDFILEEXTENSION = 'invalidFileExtension';\n\nvar validateFileExtension = function (file, allowedExtensions) {\n  if (allowedExtensions.length > 0) {\n    if (allowedExtensions.indexOf((file.extension || '').toLowerCase()) < 0) {\n      file.validationErrors = file.validationErrors || [];\n\n      if (file.validationErrors.indexOf(INVALIDFILEEXTENSION) < 0) {\n        file.validationErrors.push(INVALIDFILEEXTENSION);\n      }\n    }\n  }\n};\n\nvar validateFileSize = function (file, minFileSize, maxFileSize) {\n  if (minFileSize !== 0 && (file.size || 0) < minFileSize) {\n    file.validationErrors = file.validationErrors || [];\n\n    if (file.validationErrors.indexOf(INVALIDMINFILESIZE) < 0) {\n      file.validationErrors.push(INVALIDMINFILESIZE);\n    }\n  }\n\n  if (maxFileSize !== 0 && (file.size || 0) > maxFileSize) {\n    file.validationErrors = file.validationErrors || [];\n\n    if (file.validationErrors.indexOf(INVALIDMAXFILESIZE) < 0) {\n      file.validationErrors.push(INVALIDMAXFILESIZE);\n    }\n  }\n};\n\nvar parseAllowedExtensions = function (extensions) {\n  var allowedExtensions = extensions.map(function (ext) {\n    var parsedExt = ext.substring(0, 1) === '.' ? ext : '.' + ext;\n    return parsedExt.toLowerCase();\n  });\n  return allowedExtensions;\n};\n\nvar validateFiles = function (files, restrictionInfo) {\n  var allowedExtensions = parseAllowedExtensions(restrictionInfo.allowedExtensions || []);\n  var maxFileSize = restrictionInfo.maxFileSize || 0;\n  var minFileSize = restrictionInfo.minFileSize || 0;\n  var i;\n\n  for (i = 0; i < files.length; i++) {\n    validateFileExtension(files[i], allowedExtensions);\n    validateFileSize(files[i], minFileSize, maxFileSize);\n  }\n};\n\nexport default {\n  validateFiles: validateFiles\n};","map":{"version":3,"sources":["../../../src/utils/validationUtils.ts"],"names":[],"mappings":"AAGA,IAAM,kBAAkB,GAAG,oBAA3B;AACA,IAAM,kBAAkB,GAAG,oBAA3B;AACA,IAAM,oBAAoB,GAAG,sBAA7B;;AAEA,IAAM,qBAAqB,GAAa,UAAC,IAAD,EAAuB,iBAAvB,EAAuD;AAC3F,MAAI,iBAAiB,CAAC,MAAlB,GAA2B,CAA/B,EAAkC;AAC9B,QAAI,iBAAiB,CAAC,OAAlB,CAA0B,CAAC,IAAI,CAAC,SAAL,IAAkB,EAAnB,EAAuB,WAAvB,EAA1B,IAAkE,CAAtE,EAAyE;AACrE,MAAA,IAAI,CAAC,gBAAL,GAAwB,IAAI,CAAC,gBAAL,IAAyB,EAAjD;;AACA,UAAI,IAAI,CAAC,gBAAL,CAAsB,OAAtB,CAA8B,oBAA9B,IAAsD,CAA1D,EAA6D;AACzD,QAAA,IAAI,CAAC,gBAAL,CAAsB,IAAtB,CAA2B,oBAA3B;AACH;AACJ;AACJ;AACJ,CATD;;AAWA,IAAM,gBAAgB,GAAa,UAAC,IAAD,EAAuB,WAAvB,EAA4C,WAA5C,EAA+D;AAC9F,MAAI,WAAW,KAAK,CAAhB,IAAqB,CAAC,IAAI,CAAC,IAAL,IAAa,CAAd,IAAmB,WAA5C,EAAyD;AACrD,IAAA,IAAI,CAAC,gBAAL,GAAwB,IAAI,CAAC,gBAAL,IAAyB,EAAjD;;AACA,QAAI,IAAI,CAAC,gBAAL,CAAsB,OAAtB,CAA8B,kBAA9B,IAAoD,CAAxD,EAA2D;AACvD,MAAA,IAAI,CAAC,gBAAL,CAAsB,IAAtB,CAA2B,kBAA3B;AACH;AACJ;;AAED,MAAI,WAAW,KAAK,CAAhB,IAAqB,CAAC,IAAI,CAAC,IAAL,IAAa,CAAd,IAAmB,WAA5C,EAAyD;AACrD,IAAA,IAAI,CAAC,gBAAL,GAAwB,IAAI,CAAC,gBAAL,IAAyB,EAAjD;;AACA,QAAI,IAAI,CAAC,gBAAL,CAAsB,OAAtB,CAA8B,kBAA9B,IAAoD,CAAxD,EAA2D;AACvD,MAAA,IAAI,CAAC,gBAAL,CAAsB,IAAtB,CAA2B,kBAA3B;AACH;AACJ;AACJ,CAdD;;AAgBA,IAAM,sBAAsB,GAAa,UAAC,UAAD,EAA0B;AAC/D,MAAM,iBAAiB,GAAkB,UAAU,CAAC,GAAX,CAAe,UAAC,GAAD,EAAY;AAChE,QAAM,SAAS,GAAI,GAAG,CAAC,SAAJ,CAAc,CAAd,EAAiB,CAAjB,MAAwB,GAAzB,GAAgC,GAAhC,GAAuC,MAAM,GAA/D;AACA,WAAO,SAAS,CAAC,WAAV,EAAP;AACH,GAHwC,CAAzC;AAKA,SAAO,iBAAP;AACH,CAPD;;AASA,IAAM,aAAa,GAAa,UAAC,KAAD,EAA+B,eAA/B,EAAsE;AAClG,MAAM,iBAAiB,GAAkB,sBAAsB,CAAC,eAAe,CAAC,iBAAhB,IAAqC,EAAtC,CAA/D;AACA,MAAM,WAAW,GAAW,eAAe,CAAC,WAAhB,IAA+B,CAA3D;AACA,MAAM,WAAW,GAAW,eAAe,CAAC,WAAhB,IAA+B,CAA3D;AACA,MAAI,CAAJ;;AAEA,OAAK,CAAC,GAAG,CAAT,EAAY,CAAC,GAAG,KAAK,CAAC,MAAtB,EAA8B,CAAC,EAA/B,EAAmC;AAC/B,IAAA,qBAAqB,CAAC,KAAK,CAAC,CAAD,CAAN,EAAW,iBAAX,CAArB;AACA,IAAA,gBAAgB,CAAC,KAAK,CAAC,CAAD,CAAN,EAAW,WAAX,EAAwB,WAAxB,CAAhB;AACH;AACJ,CAVD;;AAYA,eAAe;AACX,EAAA,aAAa,EAAA;AADF,CAAf","sourceRoot":"","sourcesContent":["var INVALIDMAXFILESIZE = 'invalidMaxFileSize';\nvar INVALIDMINFILESIZE = 'invalidMinFileSize';\nvar INVALIDFILEEXTENSION = 'invalidFileExtension';\nvar validateFileExtension = function (file, allowedExtensions) {\n    if (allowedExtensions.length > 0) {\n        if (allowedExtensions.indexOf((file.extension || '').toLowerCase()) < 0) {\n            file.validationErrors = file.validationErrors || [];\n            if (file.validationErrors.indexOf(INVALIDFILEEXTENSION) < 0) {\n                file.validationErrors.push(INVALIDFILEEXTENSION);\n            }\n        }\n    }\n};\nvar validateFileSize = function (file, minFileSize, maxFileSize) {\n    if (minFileSize !== 0 && (file.size || 0) < minFileSize) {\n        file.validationErrors = file.validationErrors || [];\n        if (file.validationErrors.indexOf(INVALIDMINFILESIZE) < 0) {\n            file.validationErrors.push(INVALIDMINFILESIZE);\n        }\n    }\n    if (maxFileSize !== 0 && (file.size || 0) > maxFileSize) {\n        file.validationErrors = file.validationErrors || [];\n        if (file.validationErrors.indexOf(INVALIDMAXFILESIZE) < 0) {\n            file.validationErrors.push(INVALIDMAXFILESIZE);\n        }\n    }\n};\nvar parseAllowedExtensions = function (extensions) {\n    var allowedExtensions = extensions.map(function (ext) {\n        var parsedExt = (ext.substring(0, 1) === '.') ? ext : ('.' + ext);\n        return parsedExt.toLowerCase();\n    });\n    return allowedExtensions;\n};\nvar validateFiles = function (files, restrictionInfo) {\n    var allowedExtensions = parseAllowedExtensions(restrictionInfo.allowedExtensions || []);\n    var maxFileSize = restrictionInfo.maxFileSize || 0;\n    var minFileSize = restrictionInfo.minFileSize || 0;\n    var i;\n    for (i = 0; i < files.length; i++) {\n        validateFileExtension(files[i], allowedExtensions);\n        validateFileSize(files[i], minFileSize, maxFileSize);\n    }\n};\nexport default {\n    validateFiles: validateFiles\n};\n//# sourceMappingURL=validationUtils.js.map"]},"metadata":{},"sourceType":"module"}