{"ast":null,"code":"import * as React from 'react';\nimport { getter } from '@progress/kendo-react-common';\nconst emailRegex = new RegExp(/\\S+@\\S+\\.\\S+/);\nconst phoneRegex = new RegExp(/^[0-9 ()+-]+$/);\nconst ccardRegex = new RegExp(/^[0-9-]+$/);\nconst cvcRegex = new RegExp(/^[0-9]+$/);\nexport const termsValidator = value => value ? \"\" : \"It's required to agree with Terms and Conditions.\";\nexport const emailValidator = value => !value ? \"Email field is required.\" : emailRegex.test(value) ? \"\" : \"Email is not in a valid format.\";\nexport const nameValidator = value => !value ? \"Full Name is required\" : value.length < 7 ? \"Full Name should be at least 7 characters long.\" : \"\";\nexport const regNoValidator = value => !value ? \"User Name is required\" : value.length < 5 ? \"User name should be at least 5 characters long.\" : \"\";\nexport const programValidator = value => !value ? \"User Name is required\" : value.length < 5 ? \"User name should be at least 5 characters long.\" : \"\";\nexport const userNameValidator = value => !value ? \"User Name is required\" : value.length < 5 ? \"User name should be at least 5 characters long.\" : \"\";\nexport const phoneValidator = value => !value ? \"Phone number is required.\" : phoneRegex.test(value) ? \"\" : \"Not a valid phone number.\";\nexport const cardValidator = value => !value ? \"Credit card number is required. \" : ccardRegex.test(value) ? \"\" : \"Not a valid credit card number format.\";\nexport const cvcValidator = value => !value ? \"CVC code is required,\" : cvcRegex.test(value) || value.length !== 3 ? \"\" : \"Not a valid CVC code format.\";\nexport const guestsValidator = value => !value ? \"Number of guests is required\" : value < 5 ? \"\" : \"Maximum 5 guests\";\nexport const nightsValidator = value => value ? \"\" : \"Number of Nights is required.\";\nexport const arrivalDateValidator = value => value ? \"\" : \"Arrival Date is required.\";\nexport const colorValidator = value => value ? \"\" : \"Color is required.\";\nexport const requiredValidator = value => value ? \"\" : \"Error: This field is required.\";\nexport const passwordValidator = value => value && value.length > 8 ? '' : 'Password must be at least 8 symbols.';\nexport const addressValidator = value => value ? \"\" : \"Address is required.\";\nconst userNameGetter = getter('username');\nconst emailGetter = getter('email');\nexport const formValidator = values => {\n  const userName = userNameGetter(values);\n  const emailValue = emailGetter(values);\n\n  if (userName && emailValue && emailRegex.test(emailValue)) {\n    return {};\n  }\n\n  return {\n    VALIDATION_SUMMARY: 'Please fill in the following fields.',\n    ['username']: !userName ? 'User Name is required.' : '',\n    ['email']: emailValue && emailRegex.test(emailValue) ? '' : 'Email is required and should be in a valid format.'\n  };\n};","map":{"version":3,"sources":["C:/Users/Shubhang/Desktop/portal/Code/Form/src/app/validators.jsx"],"names":["React","getter","emailRegex","RegExp","phoneRegex","ccardRegex","cvcRegex","termsValidator","value","emailValidator","test","nameValidator","length","regNoValidator","programValidator","userNameValidator","phoneValidator","cardValidator","cvcValidator","guestsValidator","nightsValidator","arrivalDateValidator","colorValidator","requiredValidator","passwordValidator","addressValidator","userNameGetter","emailGetter","formValidator","values","userName","emailValue","VALIDATION_SUMMARY"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport { getter } from '@progress/kendo-react-common';\r\n\r\nconst emailRegex = new RegExp(/\\S+@\\S+\\.\\S+/);\r\nconst phoneRegex = new RegExp(/^[0-9 ()+-]+$/);\r\nconst ccardRegex = new RegExp(/^[0-9-]+$/);\r\nconst cvcRegex = new RegExp(/^[0-9]+$/);\r\n\r\nexport const termsValidator = (value) => value ? \"\" : \"It's required to agree with Terms and Conditions.\";\r\nexport const emailValidator = (value) => !value ?\r\n    \"Email field is required.\" :\r\n    (emailRegex.test(value) ? \"\" : \"Email is not in a valid format.\");\r\nexport const nameValidator = (value) => !value ?\r\n    \"Full Name is required\" :\r\n    value.length < 7 ? \"Full Name should be at least 7 characters long.\" : \"\";\r\nexport const regNoValidator = (value) => !value ?\r\n    \"User Name is required\" :\r\n    value.length < 5 ? \"User name should be at least 5 characters long.\" : \"\"; \r\n    export const programValidator = (value) => !value ?\r\n    \"User Name is required\" :\r\n    value.length < 5 ? \"User name should be at least 5 characters long.\" : \"\";     \r\nexport const userNameValidator = (value) => !value ?\r\n    \"User Name is required\" :\r\n    value.length < 5 ? \"User name should be at least 5 characters long.\" : \"\";\r\nexport const phoneValidator = (value) => !value ?\r\n    \"Phone number is required.\" :\r\n    phoneRegex.test(value) ? \"\" : \"Not a valid phone number.\";\r\nexport const cardValidator = (value) => !value ?\r\n    \"Credit card number is required. \" :\r\n    ccardRegex.test(value) ? \"\" : \"Not a valid credit card number format.\";\r\nexport const cvcValidator = (value) => !value ?\r\n    \"CVC code is required,\" :\r\n    cvcRegex.test(value) || value.length !== 3 ? \"\" : \"Not a valid CVC code format.\";\r\nexport const guestsValidator = (value) => !value ?\r\n    \"Number of guests is required\" :\r\n    value < 5 ? \"\" : \"Maximum 5 guests\";\r\nexport const nightsValidator = (value) => value ? \"\" : \"Number of Nights is required.\";\r\nexport const arrivalDateValidator = (value) => value ? \"\" : \"Arrival Date is required.\";\r\nexport const colorValidator = (value) => value ? \"\" : \"Color is required.\";\r\nexport const requiredValidator = (value) => value ? \"\" : \"Error: This field is required.\";\r\nexport const passwordValidator = (value) => value && value.length > 8 ? '' : 'Password must be at least 8 symbols.';\r\nexport const addressValidator = (value) => value ? \"\" : \"Address is required.\";\r\n\r\nconst userNameGetter = getter('username');\r\nconst emailGetter = getter('email');\r\n\r\nexport const formValidator = (values) => {\r\n    const userName = userNameGetter(values);\r\n    const emailValue = emailGetter(values);\r\n\r\n    if (userName && emailValue && emailRegex.test(emailValue)) {\r\n        return {};\r\n    }\r\n\r\n    return {\r\n        VALIDATION_SUMMARY: 'Please fill in the following fields.',\r\n        ['username']: !userName ? 'User Name is required.' : '',\r\n        ['email']: emailValue && emailRegex.test(emailValue) ? '' : 'Email is required and should be in a valid format.'\r\n    };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}