"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var kendo_react_common_1 = require("@progress/kendo-react-common");
var itemIdUtils_1 = require("./utils/itemIdUtils");
var itemUtils_1 = require("./utils/itemUtils");
var kendo_react_animation_1 = require("@progress/kendo-react-animation");
var consts_1 = require("./utils/consts");
/**
 * @hidden
 */
var TreeViewItem = /** @class */ (function (_super) {
    __extends(TreeViewItem, _super);
    function TreeViewItem() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.itemGuid = kendo_react_common_1.guid();
        _this.onCheckChange = function (e) {
            _this.props.onCheckChange(e, _this.item, _this.itemId);
        };
        _this.onExpandChange = function (e) {
            _this.props.onExpandChange(e, _this.item, _this.itemId);
        };
        _this.onItemClick = function (e) {
            _this.props.onItemClick(e, _this.item, _this.itemId);
        };
        _this.onPress = function (e) {
            _this.props.onPress(e.event, _this.item, _this.itemId);
        };
        _this.onDrag = function (e) {
            _this.props.onDrag(e.event, _this.item, _this.itemId);
        };
        _this.onRelease = function (e) {
            _this.props.onRelease(e.event, _this.item, _this.itemId);
        };
        _this.assignDraggableMeta = function (element) {
            if (element) {
                element[consts_1.DOM_KENDO_ITEM_ID_FIELD] = _this.props.itemId;
                element[consts_1.DOM_KENDO_TREEVIEW_GUID_FIELD] = _this.props.treeGuid;
            }
        };
        return _this;
    }
    TreeViewItem.prototype.render = function () {
        var _this = this;
        var subitems = this.renderSubitemsIfApplicable();
        var itemInPart = this.renderItemInPart();
        return (React.createElement("li", { className: this.getRootClassName(), tabIndex: this.tabIndex, role: "treeitem", "aria-expanded": this.ariaExpanded, "aria-selected": this.ariaSelected, "aria-checked": this.ariaChecked, "aria-disabled": this.fieldsSvc.disabled(this.item) ? true : undefined, ref: function (el) { return _this.itemElement = el; } },
            React.createElement("div", { className: "k-mid", ref: this.assignDraggableMeta },
                this.renderExpandIcon(),
                this.renderCheckbox(),
                this.props.draggable ?
                    React.createElement(kendo_react_common_1.Draggable, { onPress: this.onPress, onDrag: this.onDrag, onRelease: this.onRelease }, itemInPart) : itemInPart),
            this.props.animate ?
                React.createElement(kendo_react_animation_1.Reveal, { transitionEnterDuration: 200, transitionExitDuration: 200, style: { display: 'block' }, children: subitems }) : subitems));
    };
    TreeViewItem.prototype.componentDidMount = function () {
        var focusedItemId = this.props.focusedItemId;
        var currentItemId = this.itemId;
        if (focusedItemId && focusedItemId === currentItemId) {
            this.props.onFocusDomElNeeded(this.itemElement);
        }
        if (this.checkboxElement) {
            this.checkboxElement.indeterminate = this.fieldsSvc.checkIndeterminate(this.item);
        }
    };
    TreeViewItem.prototype.componentDidUpdate = function (prevProps) {
        var focusedItemId = this.props.focusedItemId;
        if (focusedItemId &&
            focusedItemId !== prevProps.focusedItemId &&
            focusedItemId === this.itemId) {
            this.props.onFocusDomElNeeded(this.itemElement);
        }
        if (this.checkboxElement) {
            var indeterminate = this.fieldsSvc.checkIndeterminate(this.item);
            if (indeterminate !== prevProps.fieldsService.checkIndeterminate(prevProps.item)) {
                this.checkboxElement.indeterminate = indeterminate;
            }
        }
    };
    TreeViewItem.prototype.renderCheckbox = function () {
        var _this = this;
        if (this.props.checkboxes) {
            return (React.createElement("div", { className: "k-checkbox-wrapper" },
                React.createElement("input", { type: "checkbox", className: "k-checkbox", checked: Boolean(this.fieldsSvc.checked(this.item)), id: this.itemGuid, tabIndex: -1, onChange: this.onCheckChange, ref: function (el) { return _this.checkboxElement = el; } }),
                React.createElement("label", { className: "k-checkbox-label", htmlFor: this.itemGuid })));
        }
        else {
            return undefined;
        }
    };
    TreeViewItem.prototype.renderExpandIcon = function () {
        return this.props.expandIcons &&
            // If it is explicitly said that the item has children (even not loaded yet)
            // or if the item actually has children, then render the icon.
            (this.fieldsSvc.hasChildren(this.item) || itemUtils_1.hasChildren(this.item, this.fieldsSvc.getChildrenField())) ?
            React.createElement("span", { className: this.getIconClassName(), onClick: this.onExpandChange }) : undefined;
    };
    TreeViewItem.prototype.renderSubitemsIfApplicable = function () {
        var _this = this;
        return itemUtils_1.isItemExpandedAndWithChildren(this.item, this.fieldsSvc) ?
            (React.createElement("ul", { className: "k-content", role: "group" }, this.fieldsSvc.children(this.item).map(function (item, index) {
                return (React.createElement(TreeViewItem, { item: item, itemId: itemIdUtils_1.createId(index, _this.itemId), treeGuid: _this.props.treeGuid, animate: _this.props.animate, focusedItemId: _this.props.focusedItemId, tabbableItemId: _this.props.tabbableItemId, fieldsService: _this.props.fieldsService, itemUI: _this.props.itemUI, checkboxes: _this.props.checkboxes, ariaMultiSelectable: _this.props.ariaMultiSelectable, onItemClick: _this.props.onItemClick, onFocusDomElNeeded: _this.props.onFocusDomElNeeded, draggable: _this.props.draggable, onPress: _this.props.onPress, onDrag: _this.props.onDrag, onRelease: _this.props.onRelease, expandIcons: _this.props.expandIcons, onExpandChange: _this.props.onExpandChange, onCheckChange: _this.props.onCheckChange, key: index }));
            }))) : undefined;
    };
    TreeViewItem.prototype.renderItemInPart = function () {
        return (React.createElement("span", { className: this.getContentClassName(), style: { touchAction: 'none' }, onClick: this.onItemClick }, this.props.itemUI ?
            React.createElement(this.props.itemUI, { item: this.item, itemHierarchicalIndex: this.itemId }) :
            this.fieldsSvc.text(this.item)));
    };
    Object.defineProperty(TreeViewItem.prototype, "fieldsSvc", {
        get: function () {
            return this.props.fieldsService;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeViewItem.prototype, "itemId", {
        get: function () {
            return this.props.itemId;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeViewItem.prototype, "item", {
        get: function () {
            return this.props.item;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeViewItem.prototype, "tabIndex", {
        get: function () {
            return (this.props.focusedItemId || this.props.tabbableItemId) === this.itemId ? 0 : -1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeViewItem.prototype, "ariaExpanded", {
        get: function () {
            return this.fieldsSvc.hasChildren(this.item) || itemUtils_1.hasChildren(this.item, this.fieldsSvc.getChildrenField()) ?
                Boolean(this.fieldsSvc.expanded(this.item)) : undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeViewItem.prototype, "ariaChecked", {
        get: function () {
            if (this.props.checkboxes) {
                if (this.fieldsSvc.checked(this.item)) {
                    return 'true';
                }
                else {
                    return this.fieldsSvc.checkIndeterminate(this.item) ? 'mixed' : 'false';
                }
            }
            else {
                return undefined;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeViewItem.prototype, "ariaSelected", {
        get: function () {
            if (this.fieldsSvc.selected(this.item)) {
                return true;
            }
            else if (this.props.ariaMultiSelectable) {
                return this.fieldsSvc.disabled(this.item) ? undefined : false;
            }
            else {
                return undefined;
            }
        },
        enumerable: true,
        configurable: true
    });
    TreeViewItem.prototype.getIconClassName = function () {
        return kendo_react_common_1.classNames('k-icon', {
            'k-i-expand': !this.fieldsSvc.expanded(this.item),
            'k-i-collapse': this.fieldsSvc.expanded(this.item),
            'k-i-loading': this.fieldsSvc.expanded(this.item) && !itemUtils_1.hasChildren(this.item, this.fieldsSvc.getChildrenField())
        });
    };
    TreeViewItem.prototype.getRootClassName = function () {
        return kendo_react_common_1.classNames('k-item k-treeview-item', { 'k-state-disabled': this.fieldsSvc.disabled(this.item) });
    };
    TreeViewItem.prototype.getContentClassName = function () {
        return kendo_react_common_1.classNames('k-in', {
            'k-state-focused': this.props.focusedItemId === this.itemId,
            'k-state-selected': this.fieldsSvc.selected(this.item)
        });
    };
    return TreeViewItem;
}(React.Component));
exports.default = TreeViewItem;
//# sourceMappingURL=TreeViewItem.js.map